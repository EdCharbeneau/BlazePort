@using System.Threading

<TelerikCircularGauge @ref="GDays" Transitions="false">
    <CircularGaugeCenterLabel>
        <Template>
            @(context.Pointers[0].Value) Days
        </Template>
    </CircularGaugeCenterLabel>
    <CircularGaugeScales>
        <CircularGaugeScale Min="0" Max="365">
        </CircularGaugeScale>
    </CircularGaugeScales>
    <CircularGaugePointers>
        <CircularGaugePointer Value="@timeSpan.Days">
        </CircularGaugePointer>
    </CircularGaugePointers>
</TelerikCircularGauge>

<TelerikCircularGauge @ref="GHours" Transitions="false">
    <CircularGaugeCenterLabel>
        <Template>
            @(context.Pointers[0].Value) Hours
        </Template>
    </CircularGaugeCenterLabel>
    <CircularGaugeScales>
        <CircularGaugeScale Min="0" Max="24">
        </CircularGaugeScale>
    </CircularGaugeScales>
    <CircularGaugePointers>
        <CircularGaugePointer Value="@timeSpan.Hours">
        </CircularGaugePointer>
    </CircularGaugePointers>
</TelerikCircularGauge>

<TelerikCircularGauge @ref="GMinutes" Transitions="false">
    <CircularGaugeCenterLabel>
        <Template>
            @(context.Pointers[0].Value) Minutes
        </Template>
    </CircularGaugeCenterLabel>
    <CircularGaugeScales>
        <CircularGaugeScale Min="0" Max="60">
        </CircularGaugeScale>
    </CircularGaugeScales>
    <CircularGaugePointers>
        <CircularGaugePointer Value="@timeSpan.Minutes">
        </CircularGaugePointer>
    </CircularGaugePointers>
</TelerikCircularGauge>

<TelerikCircularGauge @ref="GSeconds" Transitions="false">
    <CircularGaugeCenterLabel>
        <Template>
            @(context.Pointers[0].Value) Seconds
        </Template>
    </CircularGaugeCenterLabel>
    <CircularGaugeScales>
        <CircularGaugeScale Min="0" Max="60">
        </CircularGaugeScale>
    </CircularGaugeScales>
    <CircularGaugePointers>
        <CircularGaugePointer Value="@timeSpan.Seconds">
        </CircularGaugePointer>
    </CircularGaugePointers>
</TelerikCircularGauge>

@code {

    TelerikCircularGauge GDays { get; set; }
    TelerikCircularGauge GHours { get; set; }
    TelerikCircularGauge GMinutes { get; set; }
    TelerikCircularGauge GSeconds { get; set; }

    TimeSpan timeSpan;

    [Parameter] public DateTime CountdownTo { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            var timer = new Timer(new TimerCallback(_ =>
            {
                timeSpan = CountdownTo - DateTime.Now;
                GDays.Refresh();
                GHours.Refresh();
                GMinutes.Refresh();
                GSeconds.Refresh();

                InvokeAsync(StateHasChanged);
            }), null, 1000, 1000);
        }
    }
}